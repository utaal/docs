==============
storageDetails
==============

.. default-domain:: mongodb

.. dbcommand:: storageDetails

   The command can be slow, particularly on larger data sets.

   .. code-block:: javascript

      { storageDetails: "collection_name",
        analyze: "diskStorage" | "pagesInRAM" }

   This command will aggregate statistics related to the storage layout
   (when invoked with ``analyze: "diskStorage"``) or the percentage of pages
   currently in RAM (when invoked with ``analyze: "pagesInRAM"``) for the
   specified collection.
   You may also specify one of the following options:

   - ``extent: 4`` (0-based) only processes the 5th extent of the collection

   - ``range: [start, end]`` only processes the range between ``start`` bytes
     and ``end`` bytes from the start of the extent. Requires an ``extent`` to
     be specified.

   - ``granularity: 1 << 20`` splits the extents in 20MB chunks and
     reports statistics aggregated per-chunk.

   - ``numberOfChunks: 100`` splits the extent(s) in 100 chunks and
     reports statistics aggregated per-chunk.

   ``granularity`` and ``numberOfChunks`` are mutually exclusive.

   - ``characteristicField: "dotted.path"`` specifies a field in the
     documents of the collection to be inspected and averaged to give
     an hint on what kind of documents belong to an extent or chunk.
     Defaults to ``"_id"``. ObjectIDs, any number and Dates are
     supported. If the field has the wrong type in some documents
     it would be silently ignored.

   - ``processDeletedRecords: false`` disables the analysis of deleted
     records which can be slow as it requires an iteration on all
     the deletedList bucket for each extent. Defaults to ``true``.

   - ``showRecords: true`` outputs basic information for each document
     and deletedRecord encountered. It should only be enabled for small
     ranges on single extents. Produces large output which can exceed
     the maximum bson object size.

   The typical output, when ``analyze: 'diskStorage'``, has the form:

   .. code-block:: javascript

           { extentHeaderBytes: <size>,
             recordHeaderBytes: <size>,
             range: [startOfs, endOfs],     // extent-relative
             numEntries: <number of records>,
             bsonBytes: <total size of the bson objects>,
             recBytes: <total size of the valid records>,
             onDiskBytes: <length of the extent or range>,
       (opt) characteristicCount: <number of records containing the field used to tell them apart>
       (opt) characteristicAvg: <average value of the characteristic field>
             outOfOrderRecs: <number of records that follow - in the record linked list -
                              a record that is located further in the extent>
       (opt) freeRecsPerBucket: [ ... ],

   The nth element in the ``freeRecsPerBucket`` array is the count of deleted records in the
   nth bucket of the deletedList.
   ``characteristicCount`` and ``characteristicAvg`` are only present if some documents contain
   the field specified as ``characteristicField`` and it has a viable type (any number, ObjectID
   or Date).
   
   The list of chunks follows, with similar information aggregated per-chunk:

   .. code-block:: javascript

         chunks: [
             { numEntries: <number of records>,
               ...
               freeRecsPerBucket: [ ... ]
             },
             ...
         ]
   
   If ``showRecords: true`` was set two additional fields are added to the outer document:

   .. code-block:: javascript

             records: [
                 { ofs: <record offset from start of extent>,
                   recBytes: <record size>,
                   bsonBytes: <bson document size>,
        (optional) characteristic: <value of the characteristic field>
                 }, 
                 ... (one element per record)
             ],
        (optional) deletedRecords: [
                 { ofs: <offset from start of extent>,
                   recBytes: <deleted record size>
                 },
                 ... (one element per deleted record)
             ]
   
   The typical output, when ``analyze: 'pagesInRAM'``, has the form:



   The :program:`mongo` shell also provides wrappers:

   .. code-block:: javascript

      db.collection.diskStorageStats();
      db.collection.pagesInRAM();

      db.collection.getDiskStorageStats();
      db.collection.getPagesInRAM();

   ``diskStorageStats`` analyzes storage for the collection
   (equivalent to invoking the command with ``{analyze: "diskStorage"}``).

   ``pagesInRAM`` reports the percentage of pages in RAM for the collection
   (equivalent to invoking the command with ``{analyze: "pagesInRAM"}``).

   ``db.collection.getDiskStorageStats`` and ``db.collection.getPagesInRAM``
   take the same parameters as ``diskStorageStats`` and ``pagesInRAM``,
   respectively, and provide a human-readable representation of the output.


   .. warning:: This command is resource intensive and may have an
      impact on the performance of your MongoDB instance. It also requires
      the entire collection or extent to be loaded in RAM and it may
      end up evicting some of the pages from other collections or extents.

   .. read-lock
